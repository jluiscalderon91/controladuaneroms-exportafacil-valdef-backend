buildscript {
  repositories {
    maven {
      url "${sunatPUrepo}libs-release"

      credentials {
        username = "${sunatPUrepoUser}"
        password = "${sunatPUrepoPassword}"
      }
    }
    mavenLocal()
  }

  dependencies {
    classpath 'com.circulosiete.dev.plugin.ms:gen-ms-dev-plugin:0.1.128'
    classpath('org.codehaus.groovy.modules.http-builder:http-builder:0.6') {
      exclude group: 'org.codehaus.groovy', module: 'groovy'
    }
    classpath(group: 'org.codehaus.groovy', name: 'groovy', version: '2.1.0')
    classpath('org.hidetake:gradle-ssh-plugin:2.9.0')
  }
}

apply plugin: 'com.circulosiete.dev.plugin.ms'

mainClassName = 'pe.gob.sunat.controladuaneroms.exportafacil.valdef.main.ValidacionPciApplication'

repositories {
  maven {
    url "${sunatPUrepo}libs-release"

    credentials {
      username = "${sunatPUrepoUser}"
      password = "${sunatPUrepoPassword}"
    }

  }
  mavenLocal()
}
dependencies {
  //ultimas versiones de dropwizard  
  ['views', 'views-freemarker', 'client'].each {
    compile "io.dropwizard:dropwizard-${it}:1.3.14"
  }
  //framework
  compile 'tecnologiams.arquitectura:tecnologiams-arquitectura-framework-baseframework:0.1.0'
  compile 'org.mongodb:mongodb-driver-sync:3.10.2'
  compile 'org.mongodb:bson:3.10.2'
  compile 'org.mongodb:mongodb-driver-core:3.10.2'
  compile 'procesos.tecnologiams.arquitectura:tecnologiams-arquitectura-framework-mongodb:1.0.0'
  compile 'tecnologiams.arquitectura:tecnologiams-arquitectura-framework-jpa-jta:2.0.0'
  compile(group: 'com.oracle', name: 'ojdbc7', version: '12.1.0.1.0')
  compile(group: 'org.json', name: 'json', version: '20140107')
}


// Promotion
import groovyx.net.http.HttpResponseDecorator
import groovyx.net.http.RESTClient
import org.apache.http.HttpHeaders
import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.ContentType.*
import static groovyx.net.http.Method.*

class PromoteTask extends DefaultTask {
  PromoteTask() {
    group = "Promotion"
  }
  @Input
  def repoKey

  @Input
  def targetRepo

  @Input
  def dockerRepository

  @Input
  def tag

  @Input
  def username

  @Input
  def password

  @Input
  def contextUrl

  @Input
  def copy = true

  @TaskAction
  void promote() {
    URL url = new URL("$contextUrl/api/docker/$repoKey/v2/promote")
    URI uri = new URI(url.getProtocol(), url.getUserInfo(), url.getHost(), url.getPort(), url.getPath(), url.getQuery(), url.getRef())
    def http = new HTTPBuilder(uri.toString())

    http.setHeaders([Authorization: 'Basic ' + ("$username:$password".toString().bytes.encodeBase64())])

    println "Url: ${uri.toString()}"
    println "RepoKey: ${repoKey}"
    println "TargetRepo: ${targetRepo}"
    println "DockerRepository: ${dockerRepository}"
    println "Tag: ${tag}"


    http.request(POST) {
      requestContentType = JSON
      body = [
              targetRepo      : targetRepo,
              dockerRepository: dockerRepository,
              tag             : tag, copy: copy]

      response.success = { resp ->
        println "POST response status: ${resp.statusLine}"
      }

      response.failure = { resp ->
        println "Request Failed: ${resp.statusLine}"
      }
    }
  }
}

task promoteToCalidad(type: PromoteTask) {
  repoKey = 'integracion1-dr-local'
  targetRepo = 'calidad1-dr-local'
  dockerRepository = 'microservices/controladuaneroms-exportafacil-valdef-backend'
  tag = version
  username = "${sunatPUrepoUser}"
  password = "${sunatPUrepoPassword}"
  contextUrl = 'http://artifactory.insi.sunat.peru:7003/artifactory'
}

task promoteToProduccion(type: PromoteTask) {
  repoKey = 'calidad1-dr-local'
  targetRepo = 'produccion1-dr-local'
  dockerRepository = 'microservices/controladuaneroms-exportafacil-valdef-backend'
  tag = version
  username = "${sunatPUrepoUser}"
  password = "${sunatPUrepoPassword}"
  contextUrl = 'http://artifactory.insi.sunat.peru:7003/artifactory'
}

// K8S Set New Image
// https://gradle-ssh-plugin.github.io/docs/


apply plugin: 'org.hidetake.ssh'

ssh.settings {
  knownHosts = allowAnyHosts
}

remotes {
  def e = System.getenv()

  integracion {
    host = e['bamboo_deployDesaK8SADUANASS1A']
    user = e['bamboo_deployDesaK8SADUANASS1Username']
    password = e['bamboo_deployDesaK8SADUANASS1Password']
  }
  calidad1A {
    host = e['bamboo_deployQAK8SADUANASS1A']
    user = e['bamboo_deployQAK8SADUANASS1Username']
    password = e['bamboo_deployQAK8SADUANASS1Password']
  }
  produccion1A {
    host = e['bamboo_deployProdK8SADUANASS1A']
    user = e['bamboo_deployProdK8SADUANASS1Username']
    password = e['bamboo_deployProdK8SADUANASS1Password']
  }
  produccion1B {
    host = e['bamboo_deployProdK8SADUANASS1B']
    user = e['bamboo_deployProdK8SADUANASS1Username']
    password = e['bamboo_deployProdK8SADUANASS1Password']
  }
  produccion1C {
    host = e['bamboo_deployProdK8SADUANASS1C']
    user = e['bamboo_deployProdK8SADUANASS1Username']
    password = e['bamboo_deployProdK8SADUANASS1Password']
  }
  produccion2A {
    host = e['bamboo_deployProdK8SADUANASS2A']
    user = e['bamboo_deployProdK8SADUANASS2Username']
    password = e['bamboo_deployProdK8SADUANASS2Password']
  }
  produccion2B {
    host = e['bamboo_deployProdK8SADUANASS2B']
    user = e['bamboo_deployProdK8SADUANASS2Username']
    password = e['bamboo_deployProdK8SADUANASS2Password']
  }
  produccion2C {
    host = e['bamboo_deployProdK8SADUANASS2C']
    user = e['bamboo_deployProdK8SADUANASS2Username']
    password = e['bamboo_deployProdK8SADUANASS2Password']
  }
}

def despliegue(Object master, int numero, int site, String repoArtifactory) {
  boolean exito = false;
  try {
    ssh.run {
      session(master) {
        def result = execute "./start-microservicens.sh $deploymentName $deploymentName  $projectName $version " + repoArtifactory + " $K8sNamespace"
        println "Resultado despligue:  " + result
      }
    }
    exito = true;
  } catch (Exception e) {
    if (!System.getenv().TRAVIS) {
      System.err.println "** SSH error: ${e.message} - some tests will fail **"

    }
    if (numero == 3) {
      return e;
    }
  }
  return exito;
}

task setNewPublishDockerImageIntegracion {
  doLast {
    ssh.run {
      session(remotes.integracion) {
        execute "kubectl apply -f microservices/$deploymentName --record"
        execute "kubectl set image deployments/$deploymentName $deploymentName=integracion1-dr-local.artifactory.insi.sunat.peru/microservices/$projectName:$version -n $K8sNamespace"
      }
    }
  }
}

task setNewDockerImageIntegracion {
  doLast {
    ssh.run {
      session(remotes.integracion) {
        execute "kubectl set image deployments/$deploymentName $deploymentName=integracion1-dr-local.artifactory.insi.sunat.peru/microservices/$projectName:$version -n $K8sNamespace"
      }
    }
  }
}

task setNewDockerImageCalidad {
  doLast {
    String repo = "calidad1-dr-local.artifactory.insi.sunat.peru"
    boolean exito;
    Object site1Error = null;

    site1Error = despliegue(remotes.calidad1A, 1, 1, repo);

    if (site1Error != null && site1Error != true) {
      throw site1Error;
    }
  }
}

task setNewDockerImageProduccion {
  doLast {
    String repo = "produccion1-dr-local.artifactory.insi.sunat.peru"
    boolean exito = despliegue(remotes.produccion1A, 1, 1, repo)
    Object site1Error = null
    Object site2Error = null
    if (!exito) {
      exito = despliegue(remotes.produccion1B, 2, 1, repo)
      if (!exito) {
        site1Error = despliegue(remotes.produccion1C, 3, 1, repo)
      }
    }
    exito = despliegue(remotes.produccion2A, 1, 2, repo)
    if (!exito) {
      exito = despliegue(remotes.produccion2B, 2, 2, repo)
      if (!exito) {
        site2Error = despliegue(remotes.produccion2C, 3, 2, repo)
      }
    }
    if (site1Error != null && site1Error != true) {
      throw site1Error
    }
    if (site2Error != null && site2Error != true) {
      throw site2Error
    }
  }
}

task setRollbackDockerIntegracion {
  doLast {
    ssh.run {
      session(remotes.integracion) {
        execute "kubectl rollout undo deployments $deploymentName"
      }
    }
  }
}

task setRollbackDockerCalidad {
  doLast {
    ssh.run {
      session(remotes.calidad1A) {
        execute "kubectl rollout undo deployments $deploymentName"
      }
    }
  }
}

task setRollbackDockerProduccion {
  doLast {
    ssh.run {
      session(remotes.produccion1A) {
        execute "kubectl rollout undo deployments $deploymentName"
      }
      session(remotes.produccion2A) {
        execute "kubectl rollout undo deployments $deploymentName"
      }
    }
  }
}
sourceSets {
  main.output.resourcesDir = main.java.outputDir
}